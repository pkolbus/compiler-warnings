# enabled by default:
#    -Waggressive-loop-optimizations
#         Warn if a loop with constant number of iterations triggers undefined behavior.
#    -Wattribute-alias
#         Warn about type safety and similar errors in attribute alias and related.
#    -Wattributes
#         Warn about inappropriate attribute usage.
#    -Wbuiltin-declaration-mismatch
#         Warn when a built-in function is declared with the wrong signature.
#    -Wbuiltin-macro-redefined
#         Warn when a built-in preprocessor macro is undefined or redefined.
#    -Wc90-c99-compat
#         Warn about features not present in ISO C90, but present in ISO C99.
#      -Wlong-long
#           Do not warn about using \"long long\" when -pedantic.
#    -Wc99-c11-compat
#         Warn about features not present in ISO C99, but present in ISO C11.
#    -Wconversion-null
#         Warn for converting NULL from/to a non-pointer type.
#    -Wcoverage-mismatch
#         Warn in case profiles in -fprofile-use do not match.
#    -Wcpp
#         Warn when a #warning directive is encountered.
#    -Wdeclaration-after-statement
#         Warn when a declaration is found after a statement.
#    -Wdelete-incomplete
#         Warn when deleting a pointer to incomplete type.
#    -Wdeprecated
#         Warn if a deprecated compiler feature, class, method, or field is used.
#    -Wdeprecated-declarations
#         Warn about uses of __attribute__((deprecated)) declarations.
#    -Wdesignated-init
#         Warn about positional initialization of structs requiring designated initializers.
#    -Wdiscarded-array-qualifiers
#         Warn if qualifiers on arrays which are pointer targets are discarded.
#    -Wdiscarded-qualifiers
#         Warn if type qualifiers on pointers are discarded.
#    -Wdiv-by-zero
#         Warn about compile-time integer division by zero.
#    -Wendif-labels
#         Warn about stray tokens after #else and #endif.
#    -Wenum-compare
#         Warn about comparison of different enum types.
#    -Wfree-nonheap-object
#         Warn when attempting to free a non-heap object.
#    -Whsa
#         Warn when a function cannot be expanded to HSAIL.
#    -Wif-not-aligned
#         Warn when the field in a struct is not aligned.
#    -Wignored-attributes
#         Warn whenever attributes are ignored.
#    -Wimplicit-function-declaration
#         Warn about implicit function declarations.
#    -Wimplicit-int
#         Warn when a declaration does not specify a type.
#    -Wincompatible-pointer-types
#         Warn when there is a conversion between pointers that have incompatible types.
#    -Winherited-variadic-ctor
#         Warn about C++11 inheriting constructors when the base has a variadic constructor.
#    -Wint-conversion
#         Warn about incompatible integer to pointer and pointer to integer conversions.
#    -Wint-to-pointer-cast
#         Warn when there is a cast to a pointer from an integer of a different size.
#    -Winvalid-memory-model
#         Warn when an atomic memory model parameter is known to be outside the valid range.
#    -Winvalid-offsetof
#         Warn about invalid uses of the \"offsetof\" macro.
#    -Wliteral-suffix
#         Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.
#    -Wlong-long
#         Do not warn about using \"long long\" when -pedantic.
#    -Wlto-type-mismatch
#         During link time optimization warn about mismatched types of global declarations.
#    -Wmain
#         Warn about suspicious declarations of \"main\".
#    -Wnarrowing
#         Warn about narrowing conversions within { } that are ill-formed in C++11.
#    -Wnon-template-friend
#         Warn when non-templatized friend functions are declared within a template.
#    -Wodr
#         Warn about some C++ One Definition Rule violations during link time optimization.
#    -Woverflow
#         Warn about overflow in arithmetic expressions.
#    -Woverride-init-side-effects
#         Warn about overriding initializers with side effects.
#    -Wpacked-bitfield-compat
#         Warn about packed bit-fields whose offset changed in GCC 4.4.
#    -Wpmf-conversions
#         Warn when converting the type of pointers to member functions.
#    -Wpointer-compare
#         Warn when a pointer is compared with a zero character constant.
#    -Wpointer-to-int-cast
#         Warn when a pointer is cast to an integer of a different size.
#    -Wpragmas
#         Warn about misuses of pragmas.
#    -Wproperty-assign-default
#         Warn if a property for an Objective-C object has no assign semantics specified.
#    -Wprotocol
#         Warn if inherited methods are unimplemented.
#    -Wpsabi
#    -Wreturn-local-addr
#         Warn about returning a pointer/reference to a local or temporary variable.
#    -Wreturn-type
#         Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++).
#    -Wscalar-storage-order
#         Warn on suspicious constructs involving reverse scalar storage order.
#    -Wshadow-ivar
#         Warn if a local declaration hides an instance variable.
#    -Wshift-count-negative
#         Warn if shift count is negative.
#    -Wshift-count-overflow
#         Warn if shift count >= width of type.
#    -Wshift-negative-value
#         Warn if left shifting a negative value.
#    -Wsizeof-array-argument
#         Warn when sizeof is applied on a parameter declared as an array.
#    -Wstringop-truncation
#         Warn about truncation in string manipulation functions like strncat and strncpy.
#    -Wsubobject-linkage
#         Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.
#    -Wswitch-bool
#         Warn about switches with boolean controlling expression.
#    -Wswitch-unreachable
#         Warn about statements between switch's controlling expression and the first case.
#    -Wsync-nand
#         Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.
#    -Wterminate
#         Warn if a throw expression will always result in a call to terminate().
#    -Wunused-result
#         Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.
#    -Wvarargs
#         Warn about questionable usage of the macros used to retrieve variable arguments.
#    -Wvirtual-move-assign
#         Warn if a virtual base has a non-trivial move assignment operator.
#    -Wvla
#         Warn if a variable length array is used.
-Wabi
#     Warn about things that will change when compiling with an ABI-compliant compiler.
#    -Wnoexcept-type
#         Warn if C++17 noexcept function type will change the mangled name of a symbol.
#    -Wpsabi
-Wabi-tag
#     Warn if a subobject has an abi_tag attribute that the complete object type does not have.
-Wabi=
#     Warn about things that change between the current -fabi-version and the specified version.
-Waggregate-return
#     Warn about returning structures, unions or arrays.
-Waligned-new=[none|global|all]
#     Warn even if 'new' uses a class member allocation function.
-Wall
#     Enable most warning messages.
#    -Waddress
#         Warn about suspicious uses of memory addresses.
#    -Waligned-new=1
#         Warn even if 'new' uses a class member allocation function.
#    -Walloc-size-larger-than=
#         -Walloc-size-larger-than=<bytes> Warn for calls to allocation functions that attempt to allocate objects larger than the specified number of bytes.
#    -Warray-bounds
#         Warn if an array is accessed out of bounds.
#    -Warray-bounds=1
#         Warn if an array is accessed out of bounds.
#    -Wbool-compare
#         Warn about boolean expression compared with an integer value different from true/false.
#    -Wbool-operation
#         Warn about certain operations on boolean expressions.
#    -Wc++11-compat
#         Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011.
#      -Wnarrowing
#           Warn about narrowing conversions within { } that are ill-formed in C++11.
#    -Wc++14-compat
#         Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.
#    -Wc++17-compat
#         Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.
#      -Wnoexcept-type
#           Warn if C++17 noexcept function type will change the mangled name of a symbol.
#    -Wcatch-value=1
#         Warn about catch handlers of non-reference type.
#    -Wchar-subscripts
#         Warn about subscripts whose type is \"char\".
#    -Wchkp
#         Warn about memory access errors found by Pointer Bounds Checker.
#    -Wclass-memaccess
#         Warn for unsafe raw memory writes to objects of class types.
#    -Wcomment
#         Warn about possibly nested block comments, and C++ comments spanning more than one physical line.
#    -Wdelete-non-virtual-dtor
#         Warn about deleting polymorphic objects with non-virtual destructors.
#    -Wduplicate-decl-specifier
#         Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.
#    -Wenum-compare
#         Warn about comparison of different enum types.
#    -Wformat=1
#         Warn about printf/scanf/strftime/strfmon format string anomalies.
#      -Wformat-contains-nul
#           Warn about format strings that contain NUL bytes.
#      -Wformat-extra-args
#           Warn if passing too many arguments to a function for its format string.
#      -Wformat-overflow=1
#           Warn about function calls with format strings that write past the end of the destination region.
#      -Wformat-truncation=1
#           Warn about calls to snprintf and similar functions that truncate output.
#      -Wformat-zero-length
#           Warn about zero-length formats.
#      -Wnonnull
#           Warn about NULL being passed to argument slots marked as requiring non-NULL.
#    -Wframe-address
#         Warn when __builtin_frame_address or __builtin_return_address is used unsafely.
#    -Wimplicit
#         Warn about implicit declarations.
#      -Wimplicit-function-declaration
#           Warn about implicit function declarations.
#      -Wimplicit-int
#           Warn when a declaration does not specify a type.
#    -Winit-self
#         Warn about variables which are initialized to themselves.
#    -Wint-in-bool-context
#         Warn for suspicious integer expressions in boolean context.
#    -Wlogical-not-parentheses
#         Warn when logical not is used on the left hand side operand of a comparison.
#    -Wmain
#         Warn about suspicious declarations of \"main\".
#    -Wmaybe-uninitialized
#         Warn about maybe uninitialized automatic variables.
#    -Wmemset-elt-size
#         Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.
#    -Wmemset-transposed-args
#         Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.
#    -Wmisleading-indentation
#         Warn when the indentation of the code does not reflect the block structure.
#    -Wmissing-attributes
#         Warn about declarations of entities that may be missing attributes that related entities have been declared with it.
#    -Wmissing-braces
#         Warn about possibly missing braces around initializers.
#    -Wmultistatement-macros
#         Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.
#    -Wnarrowing
#         Warn about narrowing conversions within { } that are ill-formed in C++11.
#    -Wnonnull
#         Warn about NULL being passed to argument slots marked as requiring non-NULL.
#    -Wnonnull-compare
#         Warn if comparing pointer parameter with nonnull attribute with NULL.
#    -Wopenmp-simd
#         Warn if a simd directive is overridden by the vectorizer cost model.
#    -Wpacked-not-aligned
#         Warn when fields in a struct with the packed attribute are misaligned.
#    -Wparentheses
#         Warn about possibly missing parentheses.
#      -Wdangling-else
#           Warn about dangling else.
#    -Wpointer-sign
#         Warn when a pointer differs in signedness in an assignment.
#    -Wreorder
#         Warn when the compiler reorders code.
#    -Wrestrict
#         Warn when an argument passed to a restrict-qualified parameter aliases with another argument.
#    -Wreturn-type
#         Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++).
#    -Wsequence-point
#         Warn about possible violations of sequence point rules.
#    -Wsign-compare
#         Warn about signed-unsigned comparisons.
#    -Wsizeof-pointer-div
#         Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.
#    -Wsizeof-pointer-memaccess
#         Warn about suspicious length parameters to certain string functions if the argument uses sizeof.
#    -Wstrict-aliasing=3
#         Warn about code which might break strict aliasing rules.
#    -Wstrict-overflow=1
#         Warn about optimizations that assume that signed overflow is undefined.
#    -Wstringop-overflow=2
#         Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and strcpy.
#    -Wstringop-truncation
#         Warn about truncation in string manipulation functions like strncat and strncpy.
#    -Wswitch
#         Warn about enumerated switches, with no default, missing a case.
#    -Wtautological-compare
#         Warn if a comparison always evaluates to true or false.
#    -Wtrigraphs
#         Warn if trigraphs are encountered that might affect the meaning of the program.
#    -Wuninitialized
#         Warn about uninitialized automatic variables.
#      -Wmaybe-uninitialized
#           Warn about maybe uninitialized automatic variables.
#    -Wunknown-pragmas
#         Warn about unrecognized pragmas.
#    -Wunused
#         Enable all -Wunused- warnings.
#      -Wunused-but-set-variable
#           Warn when a variable is only set, otherwise unused.
#      -Wunused-function
#           Warn when a function is unused.
#      -Wunused-label
#           Warn when a label is unused.
#      -Wunused-local-typedefs
#           Warn when typedefs locally defined in a function are not used.
#      -Wunused-value
#           Warn when an expression value is unused.
#      -Wunused-variable
#           Warn when a variable is unused.
#        -Wunused-const-variable=1
#             Warn when a const variable is unused.
#    -Wvolatile-register-var
#         Warn when a register variable is declared volatile.
-Walloc-zero
#     -Walloc-zero Warn for calls to allocation functions that specify zero bytes.
-Walloca
#     Warn on any use of alloca.
-Walloca-larger-than=<number>
#     Warn on unbounded uses of alloca, and on bounded uses of alloca whose bound can be larger than <number> bytes.
-Warray-bounds=<0..2>
#     Warn if an array is accessed out of bounds.
-Wassign-intercept
#     Warn whenever an Objective-C assignment is being intercepted by the garbage collector.
-Wbad-function-cast
#     Warn about casting functions to incompatible types.
-Wc++-compat
#     Warn about C constructs that are not in the common subset of C and C++.
#    -Wenum-compare
#         Warn about comparison of different enum types.
-Wcast-align
#     Warn about pointer casts which increase alignment.
-Wcast-align=strict
#     Warn about pointer casts which increase alignment.
-Wcast-qual
#     Warn about casts which discard qualifiers.
-Wcatch-value=<0..3>
#     Warn about catch handlers of non-reference type.
-Wconditionally-supported
#     Warn for conditionally-supported constructs.
-Wconversion
#     Warn for implicit type conversions that may change a value.
#    -Wfloat-conversion
#         Warn for implicit type conversions that cause loss of floating point precision.
#    -Wsign-conversion
#         Warn for implicit type conversions between signed and unsigned integers.
-Wctor-dtor-privacy
#     Warn when all constructors and destructors are private.
-Wdate-time
#     Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage.
-Wdisabled-optimization
#     Warn when an optimization pass is disabled.
-Wdouble-promotion
#     Warn about implicit conversions from \"float\" to \"double\".
-Wduplicated-branches
#     Warn about duplicated branches in if-else statements.
-Wduplicated-cond
#     Warn about duplicated conditions in an if-else-if chain.
-Weffc++
#     Warn about violations of Effective C++ style rules.
#    -Wdelete-non-virtual-dtor
#         Warn about deleting polymorphic objects with non-virtual destructors.
#    -Wnon-virtual-dtor
#         Warn about non-virtual destructors.
-Wextra
#     Print extra (possibly unwanted) warnings.
#    -Wcast-function-type
#         Warn about casts between incompatible function types.
#    -Wclobbered
#         Warn about variables that might be changed by \"longjmp\" or \"vfork\".
#    -Wempty-body
#         Warn about an empty body in an if or else statement.
#    -Wignored-qualifiers
#         Warn whenever type qualifiers are ignored.
#    -Wimplicit-fallthrough=3
#         Warn when a switch case falls through.
#    -Wmissing-field-initializers
#         Warn about missing fields in struct initializers.
#    -Wmissing-parameter-type
#         Warn about function parameters declared without a type specifier in K&R-style functions.
#    -Wold-style-declaration
#         Warn for obsolescent usage in a declaration.
#    -Woverride-init
#         Warn about overriding initializers without side effects.
#    -Wsign-compare
#         Warn about signed-unsigned comparisons.
#    -Wsized-deallocation
#         Warn about missing sized deallocation functions.
#    -Wtype-limits
#         Warn if a comparison is always true or always false due to the limited range of the data type.
#    -Wuninitialized
#         Warn about uninitialized automatic variables.
#      -Wmaybe-uninitialized
#           Warn about maybe uninitialized automatic variables.
#    -Wunused-but-set-parameter
#         Warn when a function parameter is only set, otherwise unused.
#    -Wunused-parameter
#         Warn when a function parameter is unused.
-Wextra-semi
#     Warn about semicolon after in-class function definition.
-Wfloat-equal
#     Warn if testing floating point numbers for equality.
-Wformat-overflow=<0..2>
#     Warn about function calls with format strings that write past the end of the destination region.
-Wformat-signedness
#     Warn about sign differences with format functions.
-Wformat-truncation=<0..2>
#     Warn about calls to snprintf and similar functions that truncate output.
-Wformat=<0..2>
#     Warn about printf/scanf/strftime/strfmon format string anomalies.
-Wformat=2
#    -Wformat-nonliteral
#         Warn about format strings that are not literals.
#    -Wformat-security
#         Warn about possible security problems with format functions.
#    -Wformat-y2k
#         Warn about strftime formats yielding 2-digit years.
-Wframe-larger-than=<number>
#     Warn if a function's stack frame requires more than <number> bytes.
-Wimplicit-fallthrough=<0..5>
#     Warn when a switch case falls through.
-Wimport # IGNORED switch
-Winline
#     Warn when an inlined function cannot be inlined.
-Winvalid-pch
#     Warn about PCH files that are found but not used.
-Wjump-misses-init
#     Warn when a jump misses a variable initialization.
-Wlarger-than=<number>
#     Warn if an object is larger than <number> bytes.
-Wlogical-op
#     Warn when a logical operator is suspiciously always evaluating to true or false.
-Wmissing-declarations
#     Warn about global functions without previous declarations.
-Wmissing-include-dirs
#     Warn about user-specified include directories that do not exist.
-Wmissing-prototypes
#     Warn about global functions without prototypes.
-Wmudflap # IGNORED switch
-Wmultichar
#     Warn about use of multi-character character constants.
-Wmultiple-inheritance
#     Warn on direct multiple inheritance.
-Wnamespaces
#     Warn on namespace definition.
-Wnested-externs
#     Warn about \"extern\" declarations not at file scope.
-Wnoexcept
#     Warn when a noexcept expression evaluates to false even though the expression can't actually throw.
-Wnormalized=[none|id|nfc|nfkc]
#     Warn about non-normalized Unicode strings.
-Wnull-dereference
#     Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior.
-Wold-style-cast
#     Warn if a C-style cast is used in a program.
-Wold-style-definition
#     Warn if an old-style parameter definition is used.
-Woverloaded-virtual
#     Warn about overloaded virtual function names.
-Wpacked
#     Warn when the packed attribute has no effect on struct layout.
-Wpadded
#     Warn when padding is required to align structure members.
-Wpedantic
#     Issue warnings needed for strict compliance to the standard.
#    -Wendif-labels
#         Warn about stray tokens after #else and #endif.
#    -Wexpansion-to-defined
#         Warn if \"defined\" is used outside #if.
#    -Wmain
#         Warn about suspicious declarations of \"main\".
#    -Woverlength-strings
#         Warn if a string is longer than the maximum portable length specified by the standard.
#    -Wpointer-arith
#         Warn about function pointer arithmetic.
#    -Wpointer-sign
#         Warn when a pointer differs in signedness in an assignment.
#    -Wvariadic-macros
#         Warn about using variadic macros.
-Wplacement-new=<0..2>
#     Warn for placement new expressions with undefined behavior.
-Wredundant-decls
#     Warn about multiple declarations of the same object.
-Wregister
#     Warn about uses of register storage specifier.
-Wselector
#     Warn if a selector has multiple methods.
-Wshadow
#     Warn when one variable shadows another.  Same as -Wshadow=global.
#    -Wshadow-ivar
#         Warn if a local declaration hides an instance variable.
#    -Wshadow=local
#         Warn when one local variable shadows another local variable or parameter.
#      -Wshadow=compatible-local
#           Warn when one local variable shadows another local variable or parameter of compatible type.
-Wshift-overflow=<0..2>
#     Warn if left shift of a signed value overflows.
-Wsign-promo
#     Warn when overload promotes from unsigned to signed.
-Wstack-protector
#     Warn when not issuing stack smashing protection for some reason.
-Wstack-usage=<number>
#     Warn if stack usage might be larger than specified amount.
-Wstrict-aliasing
#     Warn about code which might break strict aliasing rules.
-Wstrict-aliasing=<0..3>
#     Warn about code which might break strict aliasing rules.
-Wstrict-null-sentinel
#     Warn about uncasted NULL used as sentinel.
-Wstrict-overflow
#     Warn about optimizations that assume that signed overflow is undefined.
-Wstrict-overflow=<0..5>
#     Warn about optimizations that assume that signed overflow is undefined.
-Wstrict-prototypes
#     Warn about unprototyped function declarations.
-Wstrict-selector-match
#     Warn if type signatures of candidate methods do not match exactly.
-Wstringop-overflow=<0..4>
#     Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and strcpy.
-Wsuggest-attribute=cold
#     Warn about functions which might be candidates for __attribute__((cold)).
-Wsuggest-attribute=const
#     Warn about functions which might be candidates for __attribute__((const)).
-Wsuggest-attribute=format
#     Warn about functions which might be candidates for format attributes.
-Wsuggest-attribute=malloc
#     Warn about functions which might be candidates for __attribute__((malloc)).
-Wsuggest-attribute=noreturn
#     Warn about functions which might be candidates for __attribute__((noreturn)).
-Wsuggest-attribute=pure
#     Warn about functions which might be candidates for __attribute__((pure)).
-Wsuggest-final-methods
#     Warn about C++ virtual methods where adding final keyword would improve code quality.
-Wsuggest-final-types
#     Warn about C++ polymorphic types where adding final keyword would improve code quality.
-Wsuggest-override
#     Suggest that the override keyword be used when the declaration of a virtual function overrides another.
-Wswitch-default
#     Warn about enumerated switches missing a \"default:\" statement.
-Wswitch-enum
#     Warn about all enumerated switches missing a specific case.
-Wsynth
#     Deprecated.  This switch has no effect.
-Wsystem-headers
#     Do not suppress warnings from system headers.
-Wtemplates
#     Warn on primary template declaration.
-Wtraditional
#     Warn about features not present in traditional C.
#    -Wvariadic-macros
#         Warn about using variadic macros.
-Wtraditional-conversion
#     Warn of prototypes causing type conversions different from what would happen in the absence of prototype.
-Wtrampolines
#     Warn whenever a trampoline is generated.
-Wundeclared-selector
#     Warn about @selector()s without previously declared methods.
-Wundef
#     Warn if an undefined macro is used in an #if directive.
-Wunreachable-code # IGNORED switch
#     Does nothing. Preserved for backward compatibility.
-Wunsafe-loop-optimizations # IGNORED switch
#     Does nothing. Preserved for backward compatibility.
-Wunsuffixed-float-constants
#     Warn about unsuffixed float constants.
-Wunused-const-variable=<0..2>
#     Warn when a const variable is unused.
-Wunused-macros
#     Warn about macros defined in the main file that are not used.
-Wuseless-cast
#     Warn about useless casts.
-Wvector-operation-performance
#     Warn when a vector operation is compiled outside the SIMD.
-Wvirtual-inheritance
#     Warn on direct virtual inheritance.
-Wvla-larger-than=<number>
#     Warn on unbounded uses of variable-length arrays, and on bounded uses of variable-length arrays whose bound can be larger than <number> bytes.
-Wwrite-strings
#     In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.
-Wzero-as-null-pointer-constant
#     Warn when a literal '0' is used as null pointer.
